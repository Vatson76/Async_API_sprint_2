"""empty message

Revision ID: b7e85cccae15
Revises: 8cccfa0aa203
Create Date: 2023-01-17 23:22:34.942432

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b7e85cccae15'
down_revision = '8cccfa0aa203'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('auth_history_smart', schema='auth')
    op.drop_table('auth_history_mobile', schema='auth')
    op.drop_table('auth_history_web', schema='auth')
    with op.batch_alter_table('auth_history', schema='auth') as batch_op:
        batch_op.create_unique_constraint(None, ['id', 'device'])
        batch_op.drop_constraint('auth_history_user_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'], referent_schema='auth', ondelete='CASCADE')

    with op.batch_alter_table('roles', schema='auth') as batch_op:
        batch_op.create_unique_constraint(None, ['id'])

    with op.batch_alter_table('user_role', schema='auth') as batch_op:
        batch_op.create_unique_constraint(None, ['id'])
        batch_op.drop_constraint('user_role_user_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'], referent_schema='auth', ondelete='CASCADE')

    with op.batch_alter_table('users', schema='auth') as batch_op:
        batch_op.create_unique_constraint(None, ['id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema='auth') as batch_op:
        batch_op.drop_constraint(None, type_='unique')

    with op.batch_alter_table('user_role', schema='auth') as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('user_role_user_id_fkey', 'users', ['user_id'], ['id'], referent_schema='auth')
        batch_op.drop_constraint(None, type_='unique')

    with op.batch_alter_table('roles', schema='auth') as batch_op:
        batch_op.drop_constraint(None, type_='unique')

    with op.batch_alter_table('auth_history', schema='auth') as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('auth_history_user_id_fkey', 'users', ['user_id'], ['id'], referent_schema='auth')
        batch_op.drop_constraint(None, type_='unique')

    op.create_table('auth_history_web',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_agent', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('ip_address', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('device', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], name='auth_history_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', 'device', name='auth_history_web_pkey'),
    schema='auth'
    )
    op.create_table('auth_history_mobile',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_agent', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('ip_address', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('device', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], name='auth_history_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', 'device', name='auth_history_mobile_pkey'),
    schema='auth'
    )
    op.create_table('auth_history_smart',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_agent', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('ip_address', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('device', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], name='auth_history_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', 'device', name='auth_history_smart_pkey'),
    schema='auth'
    )
    # ### end Alembic commands ###
